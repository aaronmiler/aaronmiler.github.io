<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Aaron Miler]]></title>
  <link href="http://aaronmiler.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://aaronmiler.com/"/>
  <updated>2016-09-21T11:12:44-07:00</updated>
  <id>http://aaronmiler.com/</id>
  <author>
    <name><![CDATA[Aaron Miler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ParkWare Released]]></title>
    <link href="http://aaronmiler.com/blog/parkware-released/"/>
    <updated>2013-11-05T18:55:00-08:00</updated>
    <id>http://aaronmiler.com/blog/parkware-released</id>
    <content type="html"><![CDATA[<p>ParkWare finally got approved by Apple and is now available on the <a href="https://itunes.apple.com/us/app/parkware/id729283928">App Store</a>. Hooray!</p>

<p>I can&rsquo;t quite decide which direction to take this blog post. I&rsquo;ve started to write about the app, as well as about developing the app. I decided that I&rsquo;m going to cover both sides here.</p>

<!-- more -->




<div style="max-width:250px;width:25%;float:right;margin:10px;"><img src="http://aaronmiler.com/images/blog/parkware_app_store.jpg" width="100%" /></div>


<h3>About the App</h3>

<p>ParkWare is an app to track where you parked your car using your phones GPS. While there are apps on the app store that already accomplish this. There is a specific problem I wanted to solve.</p>

<p>My girlfriend and I share a car, and one of the questions I get almost every day is &ldquo;Where did we park the car?&rdquo;. The solution to this problem, was an app we could both use on our iPhones, and we could park/locate the same car.</p>

<p>ParkWare identifies a car using a unique 8 digit HEX code. Users can change this code within the settings page, and if they use the same code as another user. It allows them to share a car, parking and locating the same car using the API.</p>

<h3>Developing the App</h3>

<p>ParkWare was made with RubyMotion. My whole lifetime as a web developer has been spent making things for the web. So this was the first time that I was able to make something almost tangible. This was a great feeling for me, and the fact that I could use Ruby was an added bonus.</p>

<p>Something I really liked about RubyMotion, is the fact that it compiles to machine code. Meaning there is no interperater.</p>

<p>Most the Google queries for problems come up with Objective-C answers. I was able to pop into the IRC channel to get some help with my issues. After a using RubyMotion for a while, I was able to look at Objective-C/iPhone documentation, and adapt it to RubyMotion code.</p>

<p>All in all I&rsquo;m just much happier while writing Ruby code. While learning the idiosyncrasies of iOS within RubyMotion was confusing at first. I have to say I feel as if the code I&rsquo;ve written is quite readable, and I had fun doing it. I&rsquo;ve still got quite a bit of refactoring to do. But it&rsquo;s something I&rsquo;m enjoying writing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Rubymotion Application]]></title>
    <link href="http://aaronmiler.com/blog/my-first-rubymotion-application/"/>
    <updated>2013-09-15T16:22:00-07:00</updated>
    <id>http://aaronmiler.com/blog/my-first-rubymotion-application</id>
    <content type="html"><![CDATA[<p>After struggling to figure out Rubymotion for a while. I found a <a href="http://rubymotion-tutorial.com/">great set of tutorials</a> by Clay Allsopp.</p>

<p>With these examples, and the rest of the internet to help me. I was able to Frankenstein enough things together to create an application.</p>

<!-- more -->


<p>Meet ParkWare</p>

<p><img src="/images/parquare.png" alt="ParkWare" /></p>

<p>ParkWare is an application that you can use for remembering where you parked your car. With a <a href="https://github.com/aaronmiler/car_app_api">supporting API</a> the thing that makes this iPhone app stand out is the ability to share your car code with another person.</p>

<p>Now hopefully you don&rsquo;t park your car on a highway. But if you do, ParkWare will remember where you parked it.</p>

<p>While the application works. I&rsquo;m pretty sure that my code is a mess. Regardless, there are a couple of things I figured out and found helpful. Here are a couple of snippets</p>

<p>Button with an Image Background
<code>ruby
@back_btn = UIButton.buttonWithType UIButtonTypeCustom
@back_btn.frame = [[0,0], [122, 40]]
@back_btn.setBackgroundImage(UIImage.imageNamed("btn_home_locate"), forState: UIControlStateNormal)
</code></p>

<p>I often used this for centering objects within my view window
<code>ruby
@THING.center = CGPointMake(self.view.frame.size.width / 2, Y)
</code>
Making a label wrap was tricky. But this seemed to do the trick.
<code>ruby
@update = UILabel.alloc.init
@update.lineBreakMode = UILineBreakModeWordWrap
@update.numberOfLines = 2 # Or if set to 0, allows for any number of lines
@update.frame = [[20,165],[300,100]]
</code></p>

<p>Adding an image to the view
<code>ruby
@image = UIImageView.alloc.initWithFrame([[100, 150],[258, 57]])
@image.image = UIImage.imageNamed("image")
</code></p>

<p>Another thing that made a lot more sense after I looked it up was Frames. When first playing with the numbers I thought they were (X1,Y1),(X2,Y2). When it turns out that a fame is actually [[Xpos,Ypos],[Width,Height]].</p>

<p>Every time I do something in RubyMotion I feel like I&rsquo;m learning more. As time goes I hope to make more applications and make a better use of this excellent tool.</p>

<p>I haven&rsquo;t released the application to the App Store yet, I still think I have some design changes to make. But as soon as I do it will be interesting to see if any bug reports come in. I am also going to start refactoring my code shortly after I release it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Purchased Ruby Motion]]></title>
    <link href="http://aaronmiler.com/blog/purchased-ruby-motion/"/>
    <updated>2013-08-12T22:11:00-07:00</updated>
    <id>http://aaronmiler.com/blog/purchased-ruby-motion</id>
    <content type="html"><![CDATA[<p>A couple of months ago I sarcastically said I was going to make an app for my girlfriend. Much to my surprise shortly after, she asked me if I could make that app for her, for her birthday. So I agreed to it. I&rsquo;ve been wanting to get into the iOS space for a while, and this gave me some good motivation.</p>

<!-- more -->


<p>In the past I&rsquo;ve tried to get into the mobile app space. I&rsquo;ve tried Appcelerator, Phonegap, and Cordova. None of which were really quite what I was looking for, and because each of the tools aimed for cross platform abilities. You lost some of the device features. Now while it&rsquo;s possible that these tools have evolved, I really wasn&rsquo;t a big fan of how they worked.</p>

<p>While at Railsconf I attended <a href="http://www.youtube.com/watch?v=7v3_t5SK8DM">a talk</a> about something called <a href="http://www.rubymotion.com">RubyMotion</a>. RubyMotion lets you right iOS apps in Ruby. The biggest appeal to me is that Rubymotion doesn&rsquo;t actually run the application in Ruby. It compiles to executable code that interacts with the iOS device. Meaning there are no features lost when using Rubymotion.</p>

<p>After completing the Rails powered API for the iPhone application I intend to make. I quickly purchased a Rubymotion license key, and realized I have no idea what I&rsquo;m doing. Luckly I was able to find <a href="http://pragprog.com/book/carubym/rubymotion">a nice book about Rubymotion</a> from the pragmatic press. Hopefully this will get me up and running with Rubymotion.</p>

<p>I almost forgot to mention my favorite feature of Rubymotion. When you fire up your application to debug on your phone or a virtual device. You also get the Rubymotion REPL. Which is just like running IRB on a Rails application. This allows you to update your app and see the changes real time in your terminal. It&rsquo;s pretty awesome firing up a completely blank application, and telling it to display an alert message from the terminal.</p>

<p>TL;DR Take a good look at Rubymotion. It&rsquo;s cool</p>
]]></content>
  </entry>
  
</feed>
