<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Neat | Aaron Miler]]></title>
  <link href="http://aaronmiler.com/blog/categories/neat/atom.xml" rel="self"/>
  <link href="http://aaronmiler.com/"/>
  <updated>2016-09-21T11:12:44-07:00</updated>
  <id>http://aaronmiler.com/</id>
  <author>
    <name><![CDATA[Aaron Miler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[9 Line Grid using Bourbon, Neat and Sass]]></title>
    <link href="http://aaronmiler.com/blog/9-line-grid-using-bourbon-neat-and-sass/"/>
    <updated>2014-09-06T11:11:00-07:00</updated>
    <id>http://aaronmiler.com/blog/9-line-grid-using-bourbon-neat-and-sass</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve started created a lot of my projects using the tools Thoughtbot puts out there. One of the tools I&rsquo;ve recently started using is <a href="http://bourbon.io">Broubon</a> and <a href="http://neat.bourbon.io">Neat</a>. Bourbon is a lightweight mixin library for Sass, and Neat is a grid framework.</p>

<!-- more -->


<p>Neat allows you to make grids using mixins. It makes defining your own grid very easy, and fast.</p>

<p>Here is an example of how you might create some basic grid elements using Broubon and Neat</p>

<p>```sass
.container {
  @include outer-container;
}</p>

<p>.row {
  @include row;
  &amp;:last-child {</p>

<pre><code>// Zeros out right padding to make the last element fit
@include omega;
</code></pre>

<p>  }
}</p>

<p>.grid {
  .col-1 {</p>

<pre><code>@include span-columns(1)
</code></pre>

<p>  }
  &hellip;
  .col-12 {</p>

<pre><code>@include span-columns(12)
</code></pre>

<p>  }
}
```</p>

<p>Now you can see above, that defining all 12 columns of your basic grid layout can get a little bit annoying. Luckily, Sass comes with some built in features that allow us to simplify this process.</p>

<p>Here is how you can cut the whole grid fundamentals down to less than 20 lines.</p>

<p>```sass
// Define your column numbers in an array
$columns: (1,2,3,4,5,6,7,8,9,10,11,12);</p>

<p>.container {
  @include outer-container;
}</p>

<p>.row {
  @include row;
  .grid:last-child {</p>

<pre><code>@include omega
</code></pre>

<p>  }
}
.grid {
  // Each loop, to go through the column sizes
  @each $col in $columns {</p>

<pre><code>// Dynmaically name each column size col-X where X is the number
&amp;.col-#{$col} {
  // Include the mixin to span X number of columns
  @include span-columns($col);
}
</code></pre>

<p>  }
}
```</p>

<p>There you have it, a simple, quick way to get a fundamental grid system set up!</p>

<p>Thanks <a href="http://thoughtbot.com">thoughtbot</a> for all of your awesome <a href="http://github.com/thoughtbot">open source tools</a></p>
]]></content>
  </entry>
  
</feed>
