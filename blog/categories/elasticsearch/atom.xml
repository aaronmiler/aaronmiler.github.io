<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Elasticsearch | Aaron Miler]]></title>
  <link href="http://aaronmiler.com/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="http://aaronmiler.com/"/>
  <updated>2014-09-06T11:25:05-07:00</updated>
  <id>http://aaronmiler.com/</id>
  <author>
    <name><![CDATA[Aaron Miler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elasticsearch + Jbuilder = Easymode]]></title>
    <link href="http://aaronmiler.com/blog/elasticsearch-plus-jbuilder-equals-easymode/"/>
    <updated>2014-04-06T17:16:00-07:00</updated>
    <id>http://aaronmiler.com/blog/elasticsearch-plus-jbuilder-equals-easymode</id>
    <content type="html"><![CDATA[<p>After pondering how to deal with conditional logic in Elasticsearch queries. I finally realized that the query DSL for Elasticsearch is just structured JSON. Which is why Ruby didn&rsquo;t like when the syntax was messed up.</p>

<!-- more -->


<p>Jbuilder to the rescue!</p>

<p>Now with Jbuilder you can stick whatever you want in your queries. Conditional logic, loops, anything really.</p>

<p>Here is what we had before
``` ruby
client = Elasticsearch::Client.new host: &ldquo;<a href="http://www.host.com">http://www.host.com</a>&rdquo;
client.search index: &ldquo;index_name&rdquo;, body: {
  query: {</p>

<pre><code>term: {
  FIELD: "VALUE"
}
</code></pre>

<p>  }
}
```</p>

<p>Here is what we can do now</p>

<p>``` ruby
require &lsquo;jbuilder&rsquo;
client = Elasticsearch::Client.new host: &ldquo;<a href="http://www.host.com">http://www.host.com</a>&rdquo;
query = Jbuilder.encode do |json|
  json.query do</p>

<pre><code>json.term do
  json.FIELD.do
    json.value "TERM"
  end
end
</code></pre>

<p>  end
end
client.search index: &ldquo;index_name&rdquo;, body: query
```</p>

<p>This allows you to do so much more. Like create methods that return a jbuilder object.</p>

<p>The biggest advantage I found from using Jbuilder, was it allowed me to DRY up all of my elastic search methods, and create conditional queries. While working with Jbuilder created it&rsquo;s own problems. It made working with the Elasticsearch DSL a lot easier</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Elasticsearch with Ruby and Rails]]></title>
    <link href="http://aaronmiler.com/blog/using-elasticsearch-with-ruby-and-rails/"/>
    <updated>2014-03-30T17:12:00-07:00</updated>
    <id>http://aaronmiler.com/blog/using-elasticsearch-with-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>At work I&rsquo;ve been working on replacing our current product search (currently powered by a SaaS) with Elasticsearch. When I first started I set out to find what Ruby gem I should use on this project.</p>

<p>I found a couple of very impressive gems, such as <a href="https://github.com/ankane/searchkick">Search Kick</a>, but unfortunately Search Kick currently doesn&rsquo;t support Mongoid, so I kept looking.</p>

<!-- more -->


<p>After burning through a couple of other gems, all I&rsquo;m left with now is the <a href="https://github.com/elasticsearch/elasticsearch-ruby">Elasticsearch Ruby Gem</a></p>

<p>Here are some tricks I used that I think made using the Elasticsearch gem easy.</p>

<p>Most methods are called against an Elasticsearch object. So in my model, I decided to store that object on initialization.</p>

<p>``` ruby
class Search
  attr_accessor :connection
  def initialize</p>

<pre><code>@connection = Elasticsearch::Client.new hosts: ["myhost1","myhost2" ], randomize_hosts: true
</code></pre>

<p>  end
end
<code>``
The</code>randomized_hosts: true` allows you the load balance your Elasticsearch hosts</p>

<p>With the above code I can make queries in my model like so
``` ruby
def look_for(query)
self.connection.search index: &ldquo;index_name&rdquo;, body: {</p>

<pre><code>query: {
  terms: {
    FIELD: [
      "VALUE1",
      "VALUE2"
     ]
  }
},
size: 25
</code></pre>

<p>  }
end
```
I found building queries in my ruby code to be quite annoying. Mainly because it took too long for me to get error messages from my Elasticsearch server and tests.</p>

<p>Then I found <a href="https://chrome.google.com/webstore/detail/sense/doinijnbnggojdlcjifpdckfokbbfpbo">Sense</a>. Sense is a chrome extension that allows you to build JSON based queries, that can be converted into the Ruby query DSL rather easily.</p>

<p>Here is the JSON query
``` javascript
&ldquo;query&rdquo;: {</p>

<pre><code>"terms": {
   "FIELD": [
      "VALUE1",
      "VALUE2"
   ]
}
</code></pre>

<p>}
```</p>

<p>You can see how it translates to the ruby DSL above. The feedback is quick, and it&rsquo;s a great way to test out your queries without doing a ton of modifications to your models.</p>

<p>One of the last roadblocks I ran into was dealing with Facets. I wanted to facet the products based on what Category they were in. Thing is, categories aren&rsquo;t always one word. By default Elasticsearch breaks up all of the words you want to facet. So a category like <code>Category Name</code> would come back with results something like this
```
&ldquo;terms&rdquo;: [</p>

<pre><code>        {
           "term": "Category",
           "count": 1
        },
        {
           "term": "Name",
           "count": 1
        },
</code></pre>

<p>]
```</p>

<p>What I wanted is this
```
&ldquo;terms&rdquo;: [</p>

<pre><code>        {
           "term": "Category Name",
           "count": 1
        }
</code></pre>

<p>]
```</p>

<p>To get there I found out I have to make sure anything I want to facet on (that will have more than 1 word) need to have their indexing set to <code>not_analyzed</code>. Now if you try to index something to an Elasticsearch index that doesn&rsquo;t exist, it will create it for you. But to get a column to be set as not_analyzed you need to create it yourself.</p>

<p>You can do it pretty easily like this
``` ruby
  def create_index</p>

<pre><code>self.connection.indices.create index: MYINDEXNAME,
  body: {
    mappings: {
      TYPE: {
        properties: {
          field: { type: 'string', index: 'not_analyzed'}
        }
      }
    }
  }
</code></pre>

<p>  end
```</p>

<p>My current roadblock is I can&rsquo;t put any sort of Ruby logic into the middle of the Elasticsearch query DSL, and I can&rsquo;t query for blank as it returns no results.</p>

<p>We&rsquo;ll see if something like that is possible, if not I may end up moving to another gem all together.</p>
]]></content>
  </entry>
  
</feed>
