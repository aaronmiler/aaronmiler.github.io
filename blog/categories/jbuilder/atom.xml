<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jbuilder | Aaron Miler]]></title>
  <link href="http://aaronmiler.com/blog/categories/jbuilder/atom.xml" rel="self"/>
  <link href="http://aaronmiler.com/"/>
  <updated>2014-06-29T11:46:54-07:00</updated>
  <id>http://aaronmiler.com/</id>
  <author>
    <name><![CDATA[Aaron Miler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elasticsearch + Jbuilder = Easymode]]></title>
    <link href="http://aaronmiler.com/blog/elasticsearch-plus-jbuilder-equals-easymode/"/>
    <updated>2014-04-06T17:16:00-07:00</updated>
    <id>http://aaronmiler.com/blog/elasticsearch-plus-jbuilder-equals-easymode</id>
    <content type="html"><![CDATA[<p>After pondering how to deal with conditional logic in Elasticsearch queries. I finally realized that the query DSL for Elasticsearch is just structured JSON. Which is why Ruby didn&rsquo;t like when the syntax was messed up.</p>

<!-- more -->


<p>Jbuilder to the rescue!</p>

<p>Now with Jbuilder you can stick whatever you want in your queries. Conditional logic, loops, anything really.</p>

<p>Here is what we had before
``` ruby
client = Elasticsearch::Client.new host: &ldquo;<a href="http://www.host.com">http://www.host.com</a>&rdquo;
client.search index: &ldquo;index_name&rdquo;, body: {
  query: {</p>

<pre><code>term: {
  FIELD: "VALUE"
}
</code></pre>

<p>  }
}
```</p>

<p>Here is what we can do now</p>

<p>``` ruby
require &lsquo;jbuilder&rsquo;
client = Elasticsearch::Client.new host: &ldquo;<a href="http://www.host.com">http://www.host.com</a>&rdquo;
query = Jbuilder.encode do |json|
  json.query do</p>

<pre><code>json.term do
  json.FIELD.do
    json.value "TERM"
  end
end
</code></pre>

<p>  end
end
client.search index: &ldquo;index_name&rdquo;, body: query
```</p>

<p>This allows you to do so much more. Like create methods that return a jbuilder object.</p>

<p>The biggest advantage I found from using Jbuilder, was it allowed me to DRY up all of my elastic search methods, and create conditional queries. While working with Jbuilder created it&rsquo;s own problems. It made working with the Elasticsearch DSL a lot easier</p>
]]></content>
  </entry>
  
</feed>
