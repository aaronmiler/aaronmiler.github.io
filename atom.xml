<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Aaron Miler]]></title>
  <link href="http://aaronmiler.com/atom.xml" rel="self"/>
  <link href="http://aaronmiler.com/"/>
  <updated>2015-02-09T19:10:05-08:00</updated>
  <id>http://aaronmiler.com/</id>
  <author>
    <name><![CDATA[Aaron Miler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating Docket]]></title>
    <link href="http://aaronmiler.com/blog/creating-docket/"/>
    <updated>2015-02-09T19:00:00-08:00</updated>
    <id>http://aaronmiler.com/blog/creating-docket</id>
    <content type="html"><![CDATA[<p>Last year I bought a full year calendar to hang on my wall. It was a pretty great way
for me to get at a glance information for what I had going on. Unfortunately I couldn&rsquo;t
find the one I bought last year, so this year I&rsquo;m going without one.</p>

<!-- more -->


<p>However, what this inspired me to do, is build something to facilitate what the
calendar provided, at a glance information.</p>

<p>I can&rsquo;t tell you how often I ask Siri the same questions over and over.</p>

<blockquote><p>What&rsquo;s the weather?</p>

<p>What&rsquo;s the forecast?</p>

<p>When is my next meeting?</p></blockquote>

<p>I have decided to build myself an application that for now, I&rsquo;m calling Docket.</p>

<p>Docket will provide me with at a glance information for my schedule, weather, and
who knows what else I may add to it.</p>

<p>My plan is to blog about the interesting problems that I have to solve while
building this application, in hopes that someone else can learn form my experiences,
or even that I may help myself down the road.</p>

<p>So, without further ado. <code>rails new Docket</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[9 Line Grid using Bourbon, Neat and Sass]]></title>
    <link href="http://aaronmiler.com/blog/9-line-grid-using-bourbon-neat-and-sass/"/>
    <updated>2014-09-06T11:11:00-07:00</updated>
    <id>http://aaronmiler.com/blog/9-line-grid-using-bourbon-neat-and-sass</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve started created a lot of my projects using the tools Thoughtbot puts out there. One of the tools I&rsquo;ve recently started using is <a href="http://bourbon.io">Broubon</a> and <a href="http://neat.bourbon.io">Neat</a>. Bourbon is a lightweight mixin library for Sass, and Neat is a grid framework.</p>

<!-- more -->


<p>Neat allows you to make grids using mixins. It makes defining your own grid very easy, and fast.</p>

<p>Here is an example of how you might create some basic grid elements using Broubon and Neat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.container</span> <span class="err">{</span>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> outer-container</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.row</span> <span class="err">{</span>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> row</span><span class="err">;</span>
</span><span class='line'>  <span class="k">&amp;</span><span class="nd">:last-child</span> <span class="err">{</span>
</span><span class='line'>    <span class="c1">// Zeros out right padding to make the last element fit</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> omega</span><span class="err">;</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.grid</span> <span class="err">{</span>
</span><span class='line'>  <span class="nc">.col-1</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> span-columns</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>  <span class="nc">...</span>
</span><span class='line'>  <span class="nc">.col-12</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> span-columns</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can see above, that defining all 12 columns of your basic grid layout can get a little bit annoying. Luckily, Sass comes with some built in features that allow us to simplify this process.</p>

<p>Here is how you can cut the whole grid fundamentals down to less than 20 lines.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="c1">// Define your column numbers in an array</span>
</span><span class='line'><span class="nv">$columns</span><span class="o">:</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="mi">11</span><span class="o">,</span><span class="mi">12</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.container</span> <span class="err">{</span>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> outer-container</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.row</span> <span class="err">{</span>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> row</span><span class="err">;</span>
</span><span class='line'>  <span class="nc">.grid</span><span class="nd">:last-child</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@include</span><span class="nd"> omega</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'><span class="nc">.grid</span> <span class="err">{</span>
</span><span class='line'>  <span class="c1">// Each loop, to go through the column sizes</span>
</span><span class='line'>  <span class="k">@each</span> <span class="err">$</span><span class="nt">col</span> <span class="nt">in</span> <span class="err">$</span><span class="nt">columns</span> <span class="err">{</span>
</span><span class='line'>    <span class="c1">// Dynmaically name each column size col-X where X is the number</span>
</span><span class='line'>    <span class="k">&amp;</span><span class="nc">.col-</span><span class="si">#{</span><span class="nv">$col</span><span class="si">}</span> <span class="err">{</span>
</span><span class='line'>      <span class="c1">// Include the mixin to span X number of columns</span>
</span><span class='line'>      <span class="k">@include</span><span class="nd"> span-columns</span><span class="p">(</span><span class="nv">$col</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There you have it, a simple, quick way to get a fundamental grid system set up!</p>

<p>Thanks <a href="http://thoughtbot.com">thoughtbot</a> for all of your awesome <a href="http://github.com/thoughtbot">open source tools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Running Affects My Development]]></title>
    <link href="http://aaronmiler.com/blog/how-running-affects-my-development/"/>
    <updated>2014-06-21T21:09:00-07:00</updated>
    <id>http://aaronmiler.com/blog/how-running-affects-my-development</id>
    <content type="html"><![CDATA[<p>In the beginning of March, my girlfriend and I rescued an 11 month of Siberian Husky. We decided to name him Helo (after Battlestar of course) and he is quite the handful.<!-- more --></p>

<p><span style="float:right;margin: 15px 0px 15px 20px;width:375px;">
<img src="http://aaronmiler.com/images/Helo.jpg" title="Helo the Husky" alt="Helo the Husky" />
<span style="display:block;text-align:center;"> My Husky, Helo </span>
</span></p>

<p>You see, Helo is just a constant ball of energy. We knew this going in, and so my plan was to start running with Helo every morning.</p>

<p>So after we got the dog, I started a new morning routine. Wake up at 6, grab the dog, and go out for a run. At first the running was a chore. I sometimes skipped it because I didn&rsquo;t feel like it, or maybe I was just lazy. But now I can&rsquo;t seem to bring myself to skip a day.</p>

<p>What I&rsquo;ve realized, is that running is meditative for me. While I&rsquo;m running, I&rsquo;m not really thinking about anything. Work doesn&rsquo;t exist, that bug I&rsquo;ve been wrestling with doesn&rsquo;t exist, the roadblock for that new feature is irrelevant, nothing is on my mind. I&rsquo;m just running.</p>

<p>I&rsquo;ve found that this is a great way for me to start the day. My run energizes me, and gives me a chance to clear my head.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling hstore with a Rails Migration]]></title>
    <link href="http://aaronmiler.com/blog/enabling-hstore-with-a-rails-migration/"/>
    <updated>2014-05-16T20:21:00-07:00</updated>
    <id>http://aaronmiler.com/blog/enabling-hstore-with-a-rails-migration</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve used PostgreSQL before with hstore. I&rsquo;m sure you&rsquo;ve come across this while running your migrations.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PG::UndefinedObject: ERROR:  type "hstore" does not exist</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>Then you have to go into your database, enable hstore, but what if you rebuild the database? You run into that problem all over.</p>

<p>The easiest and most reliable solution I&rsquo;ve found, is to create a migration that runs before all of your other migrations.</p>

<p>Just make sure the timestamp comes before all of the other files, and make the contents of the file look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 200001010000_enable_hstore.tb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">EnableHstore</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
</span><span class='line'>    <span class="n">execute</span> <span class="s1">&#39;CREATE EXTENSION hstore&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
</span><span class='line'>    <span class="n">execute</span> <span class="s1">&#39;DROP EXTENSION hstore&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when you migrate your database, the first thing that happens is enabling hstore.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing your Rails Engine with Multiple Versions of Rails]]></title>
    <link href="http://aaronmiler.com/blog/testing-your-rails-engine-with-multiple-versions-of-rails/"/>
    <updated>2014-05-12T21:14:00-07:00</updated>
    <id>http://aaronmiler.com/blog/testing-your-rails-engine-with-multiple-versions-of-rails</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been building a rails engine over the past couple of weeks. As I near completion, I wanted to make sure that my engine was compatible with multiple versions of Rails.</p>

<p>The way that I found the easiest was outlined by Richard Schneeman (AKA <a href="https://github.com/schneems">schneems</a>) in his blog post <a href="http://www.schneems.com/post/50991826838/testing-against-multiple-rails-versions/">Testing Against Multiple Rails Versions</a></p>

<!-- more -->


<p>His example was given for a gem, using Travis CI. Lucky for me, I was also using Travis to test my engine, and modifying his approach wasn&rsquo;t too crazy.</p>

<p>So, in order to test your Rails Engine against multiple versions of rails you will want to do the following.</p>

<p>First, in your <code>.travis.yml</code> file you&rsquo;ll want to put the following ENV variables</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># .travs.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;RAILS_VERSION=3.2.0&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;RAILS_VERSION=4.0.0&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;RAILS_VERSION=4.1.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see here I want to test against <code>Rails 3.2.0</code>, <code>Rails 4.0.0</code>, and <code>Rails 4.1.0</code>. You can put as many/any versions you want in that section.</p>

<p>Next, in your Gemfile put the following code</p>

<p><strong>NOTE</strong>: Not your engine.gemspec file, in the Gemfile in the root directory of your rails Engine</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'>
</span><span class='line'><span class="n">rails_version</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_VERSION&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;default&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">rails</span> <span class="o">=</span> <span class="k">case</span> <span class="n">rails_version</span>
</span><span class='line'>
</span><span class='line'><span class="k">when</span> <span class="s2">&quot;master&quot;</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">github</span><span class="p">:</span> <span class="s2">&quot;rails/rails&quot;</span><span class="p">}</span>
</span><span class='line'><span class="k">when</span> <span class="s2">&quot;default&quot;</span>
</span><span class='line'>  <span class="s2">&quot;&gt;= 3.2.0&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="s2">&quot;~&gt; </span><span class="si">#{</span><span class="n">rails_version</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;rails&quot;</span><span class="p">,</span> <span class="n">rails</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, make sure in your <code>.gitignore</code> file you add your <code>Gemfile.lock</code>. This will make sure that Travis rebuilds the gems for your engine every time it tests against a new environment variable.</p>

<p>After that you&rsquo;re all done, you&rsquo;ll see that the number of test runs on Travis go up pretty substantially. As you can see in the image below Travis is testing against 3 different versions of Ruby, and 3 different versions of Rails. My tests may take longer now, but it&rsquo;s nice to know</p>

<p><img src="http://aaronmiler.com/images/travis_tests.png" title="Travis Tests" alt="Travis Tests" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch + Jbuilder = Easymode]]></title>
    <link href="http://aaronmiler.com/blog/elasticsearch-plus-jbuilder-equals-easymode/"/>
    <updated>2014-04-06T17:16:00-07:00</updated>
    <id>http://aaronmiler.com/blog/elasticsearch-plus-jbuilder-equals-easymode</id>
    <content type="html"><![CDATA[<p>After pondering how to deal with conditional logic in Elasticsearch queries. I finally realized that the query DSL for Elasticsearch is just structured JSON. Which is why Ruby didn&rsquo;t like when the syntax was messed up.</p>

<!-- more -->


<p>Jbuilder to the rescue!</p>

<p>Now with Jbuilder you can stick whatever you want in your queries. Conditional logic, loops, anything really.</p>

<p>Here is what we had before</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="ss">Elasticsearch</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">new</span> <span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;http://www.host.com&quot;</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">search</span> <span class="ss">index</span><span class="p">:</span> <span class="s2">&quot;index_name&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">query</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">term</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">FIELD</span><span class="p">:</span> <span class="s2">&quot;VALUE&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is what we can do now</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;jbuilder&#39;</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="ss">Elasticsearch</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">new</span> <span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;http://www.host.com&quot;</span>
</span><span class='line'><span class="n">query</span> <span class="o">=</span> <span class="no">Jbuilder</span><span class="o">.</span><span class="n">encode</span> <span class="k">do</span> <span class="o">|</span><span class="n">json</span><span class="o">|</span>
</span><span class='line'>  <span class="n">json</span><span class="o">.</span><span class="n">query</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">json</span><span class="o">.</span><span class="n">term</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">json</span><span class="o">.</span><span class="n">FIELD</span><span class="o">.</span><span class="n">do</span>
</span><span class='line'>        <span class="n">json</span><span class="o">.</span><span class="n">value</span> <span class="s2">&quot;TERM&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">search</span> <span class="ss">index</span><span class="p">:</span> <span class="s2">&quot;index_name&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="n">query</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows you to do so much more. Like create methods that return a jbuilder object.</p>

<p>The biggest advantage I found from using Jbuilder, was it allowed me to DRY up all of my elastic search methods, and create conditional queries. While working with Jbuilder created it&rsquo;s own problems. It made working with the Elasticsearch DSL a lot easier</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Elasticsearch with Ruby and Rails]]></title>
    <link href="http://aaronmiler.com/blog/using-elasticsearch-with-ruby-and-rails/"/>
    <updated>2014-03-30T17:12:00-07:00</updated>
    <id>http://aaronmiler.com/blog/using-elasticsearch-with-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>At work I&rsquo;ve been working on replacing our current product search (currently powered by a SaaS) with Elasticsearch. When I first started I set out to find what Ruby gem I should use on this project.</p>

<p>I found a couple of very impressive gems, such as <a href="https://github.com/ankane/searchkick">Search Kick</a>, but unfortunately Search Kick currently doesn&rsquo;t support Mongoid, so I kept looking.</p>

<!-- more -->


<p>After burning through a couple of other gems, all I&rsquo;m left with now is the <a href="https://github.com/elasticsearch/elasticsearch-ruby">Elasticsearch Ruby Gem</a></p>

<p>Here are some tricks I used that I think made using the Elasticsearch gem easy.</p>

<p>Most methods are called against an Elasticsearch object. So in my model, I decided to store that object on initialization.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Search</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:connection</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@connection</span> <span class="o">=</span> <span class="ss">Elasticsearch</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">new</span> <span class="ss">hosts</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;myhost1&quot;</span><span class="p">,</span><span class="s2">&quot;myhost2&quot;</span> <span class="o">]</span><span class="p">,</span> <span class="n">randomize_hosts</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>randomized_hosts: true</code> allows you the load balance your Elasticsearch hosts</p>

<p>With the above code I can make queries in my model like so</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">look_for</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">search</span> <span class="ss">index</span><span class="p">:</span> <span class="s2">&quot;index_name&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">query</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">terms</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="ss">FIELD</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>          <span class="s2">&quot;VALUE1&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;VALUE2&quot;</span>
</span><span class='line'>         <span class="o">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="ss">size</span><span class="p">:</span> <span class="mi">25</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I found building queries in my ruby code to be quite annoying. Mainly because it took too long for me to get error messages from my Elasticsearch server and tests.</p>

<p>Then I found <a href="https://chrome.google.com/webstore/detail/sense/doinijnbnggojdlcjifpdckfokbbfpbo">Sense</a>. Sense is a chrome extension that allows you to build JSON based queries, that can be converted into the Ruby query DSL rather easily.</p>

<p>Here is the JSON query</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;query&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;terms&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>       <span class="s2">&quot;FIELD&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;VALUE1&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;VALUE2&quot;</span>
</span><span class='line'>       <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see how it translates to the ruby DSL above. The feedback is quick, and it&rsquo;s a great way to test out your queries without doing a ton of modifications to your models.</p>

<p>One of the last roadblocks I ran into was dealing with Facets. I wanted to facet the products based on what Category they were in. Thing is, categories aren&rsquo;t always one word. By default Elasticsearch breaks up all of the words you want to facet. So a category like <code>Category Name</code> would come back with results something like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;terms&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;term&quot;</span><span class="o">:</span> <span class="s2">&quot;Category&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="s2">&quot;count&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;term&quot;</span><span class="o">:</span> <span class="s2">&quot;Name&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="s2">&quot;count&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>What I wanted is this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;terms&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;term&quot;</span><span class="o">:</span> <span class="s2">&quot;Category Name&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="s2">&quot;count&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get there I found out I have to make sure anything I want to facet on (that will have more than 1 word) need to have their indexing set to <code>not_analyzed</code>. Now if you try to index something to an Elasticsearch index that doesn&rsquo;t exist, it will create it for you. But to get a column to be set as not_analyzed you need to create it yourself.</p>

<p>You can do it pretty easily like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">create_index</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">indices</span><span class="o">.</span><span class="n">create</span> <span class="ss">index</span><span class="p">:</span> <span class="no">MYINDEXNAME</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">body</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="ss">mappings</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="ss">TYPE</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="ss">properties</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="ss">field</span><span class="p">:</span> <span class="p">{</span> <span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="s1">&#39;not_analyzed&#39;</span><span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>My current roadblock is I can&rsquo;t put any sort of Ruby logic into the middle of the Elasticsearch query DSL, and I can&rsquo;t query for blank as it returns no results.</p>

<p>We&rsquo;ll see if something like that is possible, if not I may end up moving to another gem all together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reload Chrome from Vim]]></title>
    <link href="http://aaronmiler.com/blog/reload-chrome-from-vim/"/>
    <updated>2014-03-17T20:06:00-07:00</updated>
    <id>http://aaronmiler.com/blog/reload-chrome-from-vim</id>
    <content type="html"><![CDATA[<p>As my proficiency in vim increases. I&rsquo;ve started looking for little short cuts. At the office, I have two monitors, and do some front end development from time to time. The annoying thing about it, is ever since I&rsquo;ve switched to vim, I find CMD+Tabbing out of the terminal exceedingly annoying.</p>

<!-- More -->


<p>Then, I happened upon <a href="https://github.com/prasmussen/chrome-cli">Chrome CLI</a> which allows you to send commands to chrome from the command line.</p>

<p>One of the commands that is particularly useful, is the <code>Reload active tab</code> command. Which is issued with <code>chrome-cli reload</code></p>

<p>Another thing that I recently learned, is that you can issue commands to the terminal from Vim as well. All you have to do is prepend your command with a bang (!) and you can issue any command, such as <code>!open .</code> to open the current directory in the finder. Which I use quite frequently.</p>

<p>With these two factoids in my brain, I was able to create a line in my Vim RC file to reload the active chrome tab with a simple keystroke.</p>

<p>Now, when you enter in a shell command into Vim, it pops you out of vim, and waits for input to proceed. So what this command does is this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Reload the active chrome tab</span>
</span><span class='line'><span class="p">:!</span> chrome<span class="p">-</span>cli reload
</span><span class='line'><span class="c">&quot; Press Enter to execute</span>
</span><span class='line'><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="c">&quot; Press Enter again to pop back into Vim</span>
</span><span class='line'><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is what it looks like when it&rsquo;s mapped to my leader shortcut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">r</span> :<span class="p">!</span> chrome<span class="p">-</span>cli reload<span class="p">&lt;</span>CR<span class="p">&gt;&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows me to put Vim on one monitor, and chrome on the other. So I can just save, then hit <code>&lt;Leader&gt;+r</code> to reload the tab without leaving Vim.</p>

<p>I&rsquo;m tempted to add a save before the reload in order to lessen the keystrokes even more, but I haven&rsquo;t been annoyed enough quite yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switched to rbenv]]></title>
    <link href="http://aaronmiler.com/blog/switched-to-rbenv/"/>
    <updated>2013-12-27T15:14:00-08:00</updated>
    <id>http://aaronmiler.com/blog/switched-to-rbenv</id>
    <content type="html"><![CDATA[<p>I switched from using RVM to rbenv not too long ago. I&rsquo;m pretty happy with the switch, and I think I&rsquo;m better off. There are a couple of reasons that made me switch.</p>

<!-- more -->


<ul>
<li>Quick Switching between Ruby Versions</li>
<li>Upgrade with Git</li>
<li>Lightweight</li>
<li>Reliable</li>
</ul>


<p>I was using RVM for the longest time, because it is what most everybody recommended. However, I had seen the .ruby-version files throughout other projects, and was wondering why people liked <a href="https://github.com/sstephenson/rbenv">rbenv</a> so much.</p>

<p>Then all of the sudden I started having troubles while switching ruby versions with RVM. My gems got all wonky, and it just became a chore, where I found myself uninstalling my ruby and then reinstalling it just to get it to work properly.</p>

<p>So I switched to rbenv. The switch was super easy, all I had to do was this:</p>

<p><em>Note: You can install it with Brew, but I wanted more control, so I installed it this way</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
</span><span class='line'><span class="c"># I use ZSH so I&#39;m adding this to my .zshrc, if you use bash it should be your .bash_profile</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.zshrc
</span></code></pre></td></tr></table></div></figure>


<p>I then installed <a href="https://github.com/sstephenson/ruby-build">ruby-build</a> which is used to compile and install the different versions of ruby. It&rsquo;s just as easy to install</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</span></code></pre></td></tr></table></div></figure>


<p>Now, you should be able to relaunch your terminal, and run <code>rbenv install --list</code> to see all the ruby versions that are availible for install. After that, it&rsquo;s just as simple as running `rbenv install 2.0.0-p427&#8217; to install Ruby 2.0.0</p>

<p>After you install a ruby version you can do a couple of different things.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv global 2.0.0-p247 <span class="c"># Set the Global Ruby version</span>
</span><span class='line'>rbenv <span class="nb">local </span>1.9.3-p385
</span><span class='line'><span class="c"># Sets the local Ruby Version, also creates a .ruby-version file</span>
</span><span class='line'><span class="c"># and will automatically switch to that version when in that directory</span>
</span></code></pre></td></tr></table></div></figure>


<p>The quick switching between ruby versions is the main reason I like using rbenv so much.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting to use Vim]]></title>
    <link href="http://aaronmiler.com/blog/starting-to-use-vim/"/>
    <updated>2013-12-03T21:49:00-08:00</updated>
    <id>http://aaronmiler.com/blog/starting-to-use-vim</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve started to use Vim.</p>

<p>I feel incredibly inefficient right now. But I know, that with time I will learn how to efficiently edit with Vim.</p>

<!-- more -->


<p>There are a couple of things I need to figure out.</p>

<ul>
<li>How to open/edit new files more efficiently</li>
<li>How to browse a projects file structure</li>
<li>How to efficiently execute commands from Vim (Git, RSpec and such)</li>
</ul>


<p>I&rsquo;m still quite used to using Sublime Text at this point. One of the things I miss the most is the Command+T shortcut. This brought up a dialog where you could start typing part of the path or filename. It would then autocomplete the file for you, and you could open it. When you knew what you were looking for this resulted in very quick file opens.</p>

<p>I have set a couple of useful shortcuts for Vim that have helped me in the learning process though. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" Don't use the arrow keys
</span><span class='line'>noremap &lt;up&gt;    :echoerr 'USE K TO GO UP'&lt;CR&gt;
</span><span class='line'>noremap &lt;down&gt;  :echoerr 'USE J TO GO DOWN'&lt;CR&gt;
</span><span class='line'>noremap &lt;left&gt;  :echoerr 'USE H TO GO LEFT'&lt;CR&gt;
</span><span class='line'>noremap &lt;right&gt; :echoerr 'USE L TO GO RIGHT'&lt;CR&gt;</span></code></pre></td></tr></table></div></figure>


<p>When I first started I found myself drifting to the arrow keys every now and again. This makes it so every time I try to use the arrow keys, I get a nice red error in vim that tells me to use the actual navigation command for that.</p>

<p>Another thing I found helpful was this shortcut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" Remap jk to leave insert mode
</span><span class='line'>imap jk &lt;ESC&gt; </span></code></pre></td></tr></table></div></figure>


<p>This allows me to exit insert mode very easily.</p>

<p>The learning curve is steep, but I know that with time will come Vim Mastery.</p>

<p>What I&rsquo;m really looking forward to, is the super speedy vim editing I&rsquo;ve seen from others live coding at conferences.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ParkWare Released]]></title>
    <link href="http://aaronmiler.com/blog/parkware-released/"/>
    <updated>2013-11-05T18:55:00-08:00</updated>
    <id>http://aaronmiler.com/blog/parkware-released</id>
    <content type="html"><![CDATA[<p>ParkWare finally got approved by Apple and is now available on the <a href="https://itunes.apple.com/us/app/parkware/id729283928">App Store</a>. Hooray!</p>

<p>I can&rsquo;t quite decide which direction to take this blog post. I&rsquo;ve started to write about the app, as well as about developing the app. I decided that I&rsquo;m going to cover both sides here.</p>

<!-- more -->




<div style="max-width:250px;width:25%;float:right;margin:10px;"><img src="http://aaronmiler.com/images/blog/parkware_app_store.jpg" width="100%" /></div>


<h3>About the App</h3>

<p>ParkWare is an app to track where you parked your car using your phones GPS. While there are apps on the app store that already accomplish this. There is a specific problem I wanted to solve.</p>

<p>My girlfriend and I share a car, and one of the questions I get almost every day is &ldquo;Where did we park the car?&rdquo;. The solution to this problem, was an app we could both use on our iPhones, and we could park/locate the same car.</p>

<p>ParkWare identifies a car using a unique 8 digit HEX code. Users can change this code within the settings page, and if they use the same code as another user. It allows them to share a car, parking and locating the same car using the API.</p>

<h3>Developing the App</h3>

<p>ParkWare was made with RubyMotion. My whole lifetime as a web developer has been spent making things for the web. So this was the first time that I was able to make something almost tangible. This was a great feeling for me, and the fact that I could use Ruby was an added bonus.</p>

<p>Something I really liked about RubyMotion, is the fact that it compiles to machine code. Meaning there is no interperater.</p>

<p>Most the Google queries for problems come up with Objective-C answers. I was able to pop into the IRC channel to get some help with my issues. After a using RubyMotion for a while, I was able to look at Objective-C/iPhone documentation, and adapt it to RubyMotion code.</p>

<p>All in all I&rsquo;m just much happier while writing Ruby code. While learning the idiosyncrasies of iOS within RubyMotion was confusing at first. I have to say I feel as if the code I&rsquo;ve written is quite readable, and I had fun doing it. I&rsquo;ve still got quite a bit of refactoring to do. But it&rsquo;s something I&rsquo;m enjoying writing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making the ST/STT Shortcut work with Sublime Text 3]]></title>
    <link href="http://aaronmiler.com/blog/making-the-st-slash-stt-shortcut-work-with-sublime-text-3/"/>
    <updated>2013-10-22T22:08:00-07:00</updated>
    <id>http://aaronmiler.com/blog/making-the-st-slash-stt-shortcut-work-with-sublime-text-3</id>
    <content type="html"><![CDATA[<p>I recently made the switch to Sublime Text 3. When I did this I finally removed the Sublime Text 2 application from my computer so I would quit having two instances of Sublime Text open at the same time.</p>

<!-- more -->


<p>When I did this, this happened.
<img src="http://aaronmiler.com/images/broken-zsh.png" alt="Broken Command" /></p>

<p>Whoops, I broke one of my favorite short cuts. Oh-My-ZSH has a shortcut to open a file/directory in Sublime Text.</p>

<p>You can run <code>st</code> to open a file, or <code>stt</code> to open the current directory in Sublime Text.</p>

<p>After the upgrade I broke that shortcut. The Sublime Text 3 application file name is just <code>Sublime Text.app</code> instead of Sublime Text 2 shortcut of <code>Sublime Text 2.app</code>.</p>

<p>To fix it I simply went into the Sublime Text 2 plugin within ZSH (found here <code>~/.oh-my-zsh/plugins/sublime</code>) from this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>local _sublime_darwin_paths &gt; /dev/null 2&gt;&1
</span><span class='line'>_sublime_darwin_paths=(
</span><span class='line'>  "/usr/local/bin/subl"
</span><span class='line'>  "$HOME/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl"
</span><span class='line'>  "$HOME/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
</span><span class='line'>  "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl"
</span><span class='line'>  "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>to this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>local _sublime_darwin_paths &gt; /dev/null 2&gt;&1
</span><span class='line'>_sublime_darwin_paths=(
</span><span class='line'>  "/usr/local/bin/subl"
</span><span class='line'>  "$HOME/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
</span><span class='line'>  "$HOME/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
</span><span class='line'>  "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
</span><span class='line'>  "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>The only small change I had to make was line 4, and 6, and just like that, one of my favorite ZSH shortcuts is fixed! If your Sublime Text 3 application is named <code>Sublime Text 3.app</code> I would assume that you&rsquo;d just have to change the 2, to a 3, and that would fix the problem just as easily.</p>

<p>Hooray!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manipulating Files with the GitHub API Gem]]></title>
    <link href="http://aaronmiler.com/blog/manipulating-files-with-github-api-gem/"/>
    <updated>2013-10-06T15:27:00-07:00</updated>
    <id>http://aaronmiler.com/blog/manipulating-files-with-github-api-gem</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been building an application, that is for creating, managing and organizing all those little bits of code you have floating around in your brain. Every piece of knowledge you save within the application gets saved to GitHub in your own personal repository.</p>

<!-- more -->


<p>I&rsquo;m using two different Gems to interact with the GitHub API. I&rsquo;m using the <a href="https://github.com/peter-murach/github">GitHub API Gem</a> by Piotr Murach, as well as the <a href="https://github.com/octokit/octokit.rb">Octokit</a> gem which is maintained by GitHub. Most of the interaction I&rsquo;m doing with the GitHub API is with Piotr&rsquo;s gem, however the Octokit gem has new features implemented faster.</p>

<p>A pivotal piece of this application, is the ability to create, remove, and update files. So being more comfortable with Pitor&rsquo;s gem, I decided to use it for the file manipulation.</p>

<p>I was able to find some <a href="https://github.com/peter-murach/github/wiki#githubapi-committing-file">documentation in the Github</a> repo outlining how to create a file. However, as it turns out, the documentation is very dated.</p>

<p>So I took matters into my own hands and looked at the source code to figure out what&rsquo;s going on. Finally after hours of banging my head against the wall, I found the solution I was looking for.</p>

<p>My gift to you, is what you need to create/update/remove a file using Pitor Murach&rsquo;s Github_API Gem.</p>

<p>All Methods use the Github Repo Contents method to interact with the Repo Contents API</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">github</span> <span class="o">=</span> <span class="ss">Github</span><span class="p">:</span><span class="ss">:Repos</span><span class="o">::</span><span class="no">Contents</span><span class="o">.</span><span class="n">new</span>  <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="s1">&#39;username&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:oauth_token</span> <span class="o">=&gt;</span> <span class="s1">&#39;oauth_token&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:repo</span> <span class="o">=&gt;</span> <span class="s1">&#39;repo_name&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Creating a File</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">github</span><span class="o">.</span><span class="n">create</span> <span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="s1">&#39;repo_name&#39;</span><span class="p">,</span> <span class="s1">&#39;full_path_to/file.ext&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;full_path_to/file.ext&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s1">&#39;Your commit message&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s1">&#39;The contents of your file&#39;</span>
</span><span class='line'><span class="c1"># Content is all Base64 encoded to/from the API, and when you create a file it encodes it automatically for you</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Update a File</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># First you need to find the file so you can get the SHA you&#39;re updating off of</span>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="n">github</span><span class="o">.</span><span class="n">find</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;full_path_to/file.ext&#39;</span>
</span><span class='line'><span class="c1"># Then update the file just like you do with creating</span>
</span><span class='line'><span class="n">github</span><span class="o">.</span><span class="n">update</span> <span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="s1">&#39;repo_name&#39;</span><span class="p">,</span> <span class="s1">&#39;full_path_to/file.ext&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;full_path_to/file.ext&#39;</span>
</span><span class='line'>  <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s1">&#39;Your commit message&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">markdown</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:sha</span> <span class="o">=&gt;</span> <span class="n">file</span><span class="o">.</span><span class="n">sha</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Removing a File</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># First you need to find the file so you can get the SHA you&#39;re removing</span>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="n">github</span><span class="o">.</span><span class="n">find</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;full_path_to/file.ext&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">github</span><span class="o">.</span><span class="n">delete</span> <span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="s1">&#39;tome-of-knowledge&#39;</span><span class="p">,</span> <span class="s1">&#39;full_path_to/file.ext&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;full_path_to/file.ext&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s1">&#39;Your Commit Message&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:sha</span> <span class="o">=&gt;</span> <span class="n">file</span><span class="o">.</span><span class="n">sha</span>
</span></code></pre></td></tr></table></div></figure>


<p>There you have it. I plan to send in a pull-request to update the documentation. Hope this saves someone some time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Rubymotion Application]]></title>
    <link href="http://aaronmiler.com/blog/my-first-rubymotion-application/"/>
    <updated>2013-09-15T16:22:00-07:00</updated>
    <id>http://aaronmiler.com/blog/my-first-rubymotion-application</id>
    <content type="html"><![CDATA[<p>After struggling to figure out Rubymotion for a while. I found a <a href="http://rubymotion-tutorial.com/">great set of tutorials</a> by Clay Allsopp.</p>

<p>With these examples, and the rest of the internet to help me. I was able to Frankenstein enough things together to create an application.</p>

<!-- more -->


<p>Meet ParkWare</p>

<p><img src="http://aaronmiler.com/images/parquare.png" alt="ParkWare" /></p>

<p>ParkWare is an application that you can use for remembering where you parked your car. With a <a href="https://github.com/aaronmiler/car_app_api">supporting API</a> the thing that makes this iPhone app stand out is the ability to share your car code with another person.</p>

<p>Now hopefully you don&rsquo;t park your car on a highway. But if you do, ParkWare will remember where you parked it.</p>

<p>While the application works. I&rsquo;m pretty sure that my code is a mess. Regardless, there are a couple of things I figured out and found helpful. Here are a couple of snippets</p>

<p>Button with an Image Background</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@back_btn</span> <span class="o">=</span> <span class="no">UIButton</span><span class="o">.</span><span class="n">buttonWithType</span> <span class="no">UIButtonTypeCustom</span>
</span><span class='line'><span class="vi">@back_btn</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">122</span><span class="p">,</span> <span class="mi">40</span><span class="o">]]</span>
</span><span class='line'><span class="vi">@back_btn</span><span class="o">.</span><span class="n">setBackgroundImage</span><span class="p">(</span><span class="no">UIImage</span><span class="o">.</span><span class="n">imageNamed</span><span class="p">(</span><span class="s2">&quot;btn_home_locate&quot;</span><span class="p">),</span> <span class="ss">forState</span><span class="p">:</span> <span class="no">UIControlStateNormal</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I often used this for centering objects within my view window</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@THING</span><span class="o">.</span><span class="n">center</span> <span class="o">=</span> <span class="no">CGPointMake</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">Y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Making a label wrap was tricky. But this seemed to do the trick.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@update</span> <span class="o">=</span> <span class="no">UILabel</span><span class="o">.</span><span class="n">alloc</span><span class="o">.</span><span class="n">init</span>
</span><span class='line'><span class="vi">@update</span><span class="o">.</span><span class="n">lineBreakMode</span> <span class="o">=</span> <span class="no">UILineBreakModeWordWrap</span>
</span><span class='line'><span class="vi">@update</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1"># Or if set to 0, allows for any number of lines</span>
</span><span class='line'><span class="vi">@update</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">20</span><span class="p">,</span><span class="mi">165</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">300</span><span class="p">,</span><span class="mi">100</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding an image to the view</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@image</span> <span class="o">=</span> <span class="no">UIImageView</span><span class="o">.</span><span class="n">alloc</span><span class="o">.</span><span class="n">initWithFrame</span><span class="p">(</span><span class="o">[[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">150</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">258</span><span class="p">,</span> <span class="mi">57</span><span class="o">]]</span><span class="p">)</span>
</span><span class='line'><span class="vi">@image</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="no">UIImage</span><span class="o">.</span><span class="n">imageNamed</span><span class="p">(</span><span class="s2">&quot;image&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another thing that made a lot more sense after I looked it up was Frames. When first playing with the numbers I thought they were (X1,Y1),(X2,Y2). When it turns out that a fame is actually [[Xpos,Ypos],[Width,Height]].</p>

<p>Every time I do something in RubyMotion I feel like I&rsquo;m learning more. As time goes I hope to make more applications and make a better use of this excellent tool.</p>

<p>I haven&rsquo;t released the application to the App Store yet, I still think I have some design changes to make. But as soon as I do it will be interesting to see if any bug reports come in. I am also going to start refactoring my code shortly after I release it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Devise Invitable]]></title>
    <link href="http://aaronmiler.com/blog/using-devise-invitable/"/>
    <updated>2013-08-28T10:16:00-07:00</updated>
    <id>http://aaronmiler.com/blog/using-devise-invitable</id>
    <content type="html"><![CDATA[<p>I love using Devise for application authentication. When I was creating the <a href="https://github.com/quangoinc/realtime_qa">Realtime QA Tool</a> I needed to make sure that the sign up form wasn&rsquo;t publicly accessible. So I started doing a little bit of searching I found <a href="https://github.com/scambra/devise_invitable">Devise Invitable</a>. Devise invitable allows you to invite users via e-mail to your application.</p>

<!-- more -->


<p>Getting up and running with Devise Invitable is really easy. The documentation is pretty good and walks you through the setup process step by step.</p>

<p>You start out with two simple commands</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails generate devise_invitable:install
</span><span class='line'>rails generate devise_invitable MODEL</span></code></pre></td></tr></table></div></figure>


<p>Then, update your devise model to include the <code>:invitable</code> module</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:database_authenticatable</span><span class="p">,</span> <span class="ss">:confirmable</span><span class="p">,</span> <span class="ss">:invitable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and you&rsquo;re good to go.</p>

<p>After Devise Invitable is installed and ready to go, I usually end up making an invitation action in one of my controllers. Devise Invitable does allow you to make a dedicated controller for it. But I find I can usually accomplish everything with a simple action that looks something like that</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">invite_user</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">invite!</span><span class="p">(</span><span class="ss">:email</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like that, you can now invite users to your application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Purchased Ruby Motion]]></title>
    <link href="http://aaronmiler.com/blog/purchased-ruby-motion/"/>
    <updated>2013-08-12T22:11:00-07:00</updated>
    <id>http://aaronmiler.com/blog/purchased-ruby-motion</id>
    <content type="html"><![CDATA[<p>A couple of months ago I sarcastically said I was going to make an app for my girlfriend. Much to my surprise shortly after, she asked me if I could make that app for her, for her birthday. So I agreed to it. I&rsquo;ve been wanting to get into the iOS space for a while, and this gave me some good motivation.</p>

<!-- more -->


<p>In the past I&rsquo;ve tried to get into the mobile app space. I&rsquo;ve tried Appcelerator, Phonegap, and Cordova. None of which were really quite what I was looking for, and because each of the tools aimed for cross platform abilities. You lost some of the device features. Now while it&rsquo;s possible that these tools have evolved, I really wasn&rsquo;t a big fan of how they worked.</p>

<p>While at Railsconf I attended <a href="http://www.youtube.com/watch?v=7v3_t5SK8DM">a talk</a> about something called <a href="http://www.rubymotion.com">RubyMotion</a>. RubyMotion lets you right iOS apps in Ruby. The biggest appeal to me is that Rubymotion doesn&rsquo;t actually run the application in Ruby. It compiles to executable code that interacts with the iOS device. Meaning there are no features lost when using Rubymotion.</p>

<p>After completing the Rails powered API for the iPhone application I intend to make. I quickly purchased a Rubymotion license key, and realized I have no idea what I&rsquo;m doing. Luckly I was able to find <a href="http://pragprog.com/book/carubym/rubymotion">a nice book about Rubymotion</a> from the pragmatic press. Hopefully this will get me up and running with Rubymotion.</p>

<p>I almost forgot to mention my favorite feature of Rubymotion. When you fire up your application to debug on your phone or a virtual device. You also get the Rubymotion REPL. Which is just like running IRB on a Rails application. This allows you to update your app and see the changes real time in your terminal. It&rsquo;s pretty awesome firing up a completely blank application, and telling it to display an alert message from the terminal.</p>

<p>TL;DR Take a good look at Rubymotion. It&rsquo;s cool</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps v3 Custom HTML Map Marker]]></title>
    <link href="http://aaronmiler.com/blog/google-maps-v3-custom-html-map-marker/"/>
    <updated>2013-07-29T14:23:00-07:00</updated>
    <id>http://aaronmiler.com/blog/google-maps-v3-custom-html-map-marker</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently building a small rails app that will display where all of the breweries located in Portland Oregon are. So far the most complicated thing about it is interfacing with the Google Maps v3 API. Many of the problems I face, Google has examples for in their documentation. However, some examples seem to be buried deep down in the recesses of the documentation and are a little bit harder to come by.</p>

<!-- more -->


<p> After two or so hours of searching for a way to make custom HTML map markers, I finally found an example in a forum.</p>

<p> Here is the basic code I found for creating a custom HTML map marker.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">function</span> <span class="nx">CustomMarker</span><span class="p">(</span><span class="nx">latlng</span><span class="p">,</span>  <span class="nx">map</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">latlng_</span> <span class="o">=</span> <span class="nx">latlng</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Once the LatLng and text are set, add the overlay to the map.  This will</span>
</span><span class='line'>     <span class="c1">// trigger a call to panes_changed which should in turn call draw.</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">setMap</span><span class="p">(</span><span class="nx">map</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nx">CustomMarker</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">OverlayView</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="nx">CustomMarker</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Check if the div has been created.</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">div_</span><span class="p">;</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">div</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Create a overlay text DIV</span>
</span><span class='line'>       <span class="nx">div</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">div_</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;DIV&#39;</span><span class="p">);</span>
</span><span class='line'>       <span class="c1">// Create the DIV representing our CustomMarker</span>
</span><span class='line'>       <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">border</span> <span class="o">=</span> <span class="s1">&#39;2px solid blue&#39;</span><span class="p">;</span>
</span><span class='line'>       <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="s1">&#39;absolute&#39;</span><span class="p">;</span>
</span><span class='line'>       <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">paddingLeft</span> <span class="o">=</span> <span class="s1">&#39;0px&#39;</span><span class="p">;</span>
</span><span class='line'>       <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">cursor</span> <span class="o">=</span> <span class="s1">&#39;pointer&#39;</span><span class="p">;</span>
</span><span class='line'>       <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="s1">&#39;10px&#39;</span><span class="p">;</span>
</span><span class='line'>       <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="s1">&#39;10px&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">addDomListener</span><span class="p">(</span><span class="nx">div</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">);</span>
</span><span class='line'>       <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Then add the overlay to the DOM</span>
</span><span class='line'>       <span class="kd">var</span> <span class="nx">panes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getPanes</span><span class="p">();</span>
</span><span class='line'>       <span class="nx">panes</span><span class="p">.</span><span class="nx">overlayImage</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Position the overlay </span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">point</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getProjection</span><span class="p">().</span><span class="nx">fromLatLngToDivPixel</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">latlng_</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="nx">point</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">point</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
</span><span class='line'>       <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">point</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>   <span class="nx">CustomMarker</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">remove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Check if the overlay was on the map and needs to be removed.</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">div_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">this</span><span class="p">.</span><span class="nx">div_</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">div_</span><span class="p">);</span>
</span><span class='line'>       <span class="k">this</span><span class="p">.</span><span class="nx">div_</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>   <span class="nx">CustomMarker</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPosition</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">latlng_</span><span class="p">;</span>
</span><span class='line'>   <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>After finding this it was rather easy to replace my normal map markers with the custom ones. I just changed my code from</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">marker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Marker</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">position</span><span class="o">:</span> <span class="nx">myLatlng</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="nx">myid</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">map</span><span class="o">:</span> <span class="nx">map</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="nx">name</span><span class="p">,</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">overlay</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CustomMarker</span><span class="p">(</span><span class="nx">myLatlng</span><span class="p">,</span> <span class="nx">map</span><span class="p">,</span> <span class="nx">className</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you&rsquo;ll notice I have a couple of extra parameters in my CustomMarker function call. Luckily with a couple of modifications it is very easy to pass parameters to your custom marker.</p>

<p>All you have to do is add a couple of attributes to the main function, and they are accessible in the marker creation. Here is a basic example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">CustomMarker</span><span class="p">(</span><span class="nx">latlng</span><span class="p">,</span>  <span class="nx">map</span><span class="p">,</span> <span class="nx">PARAM1</span><span class="p">,</span> <span class="nx">PARAM2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">latlng_</span> <span class="o">=</span> <span class="nx">latlng</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">CustomParam1</span> <span class="o">=</span> <span class="nx">PARAM1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">CustomParam2</span> <span class="o">=</span> <span class="nx">PARAM2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">setMap</span><span class="p">(</span><span class="nx">map</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">CustomMarker</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">div_</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">div</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">div</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">div_</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;DIV&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Maybe Custom Param 1 is a class name</span>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">CustomParam1</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// And Param 2 is some content for the marker</span>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">contentText</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">CustomParam2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">border</span> <span class="o">=</span> <span class="s1">&#39;2px solid blue&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="s1">&#39;absolute&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">paddingLeft</span> <span class="o">=</span> <span class="s1">&#39;0px&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">cursor</span> <span class="o">=</span> <span class="s1">&#39;pointer&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="s1">&#39;10px&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="s1">&#39;10px&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">panes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getPanes</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">panes</span><span class="p">.</span><span class="nx">overlayImage</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">point</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getProjection</span><span class="p">().</span><span class="nx">fromLatLngToDivPixel</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">latlng_</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">point</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">point</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">point</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I personally find that using custom HTML map markers in Google maps is much easier than using their map markers. It allows me to do things like CSS hover states and styling, as well as have better event listeners for buttons/links inside of the info windows.</p>

<p>Here is the <a href="http://gmaps-samples-v3.googlecode.com/svn/trunk/overlayview/custommarker.html">demo from Google</a> I was linked to.</p>

<p>Enjoy your custom map markers, and make something cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Octopress and Github to Host My Website]]></title>
    <link href="http://aaronmiler.com/blog/hosting-your-octopress-blog-on-github/"/>
    <updated>2013-06-29T20:47:00-07:00</updated>
    <id>http://aaronmiler.com/blog/hosting-your-octopress-blog-on-github</id>
    <content type="html"><![CDATA[<p>Last week I started building my site on Octopress. Coming from Jekyll everything was rather familiar. While developing my site, I listened to a great podcast, called &ldquo;Jekyll and CMS-less websites with Young Hahn and Dave Cole&rdquo; on The Web Ahead. I won&rsquo;t attempt to summarize it as there is so much covered, and it really got me excited about using Jekyll. If you haven&rsquo;t listened to it, you can listen to it <a href="http://5by5.tv/webahead/54">here</a>.</p>

<!-- more -->


<p> As I got closer to finishing my site, I started to wonder about how I was going to host it. With my initial Jekyll set up I had just uploaded the static files to a Digital Ocean VPS and called it a day. But the Jekyll podcast got me thinking about hosting my site on GitHub pages for free, so I gave it a shot.</p>

<p>Very quickly I realized how easy it was to throw my site up on github pages. The directions for all of the pieces are a little scattered, so I figured I&rsquo;d put them all here for other Internet goers to enjoy.</p>

<h3>Setting up your GitHub Repo.</h3>

<p><a href="http://pages.github.com/">Github Pages</a> allows you to host static content on GitHub for free. There are two different type of GitHub Pages. There are Project Pages, and User/Orginization pages. The User/Orinization pages must follow this formation <em>username/username.github.io</em> and you can only create your own User/Org pages, you can&rsquo;t take somebody else&rsquo;s name. Project Pages behave a little differently. All you have to do for any given project is add a branch called gh-pages and that is the branch that GitHub will use to build the site. The User/Org page can be accessed from <a href="http://username.github.io">http://username.github.io</a> while the project pages are accessed from <a href="http://username.github.io/project.">http://username.github.io/project.</a></p>

<h3>Setting up your Octopress</h3>

<p>Out of the box Octopress is already all wired up to deploy to GitHub, all you have to do is give it the destination. All you have to do is:</p>

<ul>
<li>Run <em>rake setup_github_pages</em></li>
<li>Paste in your repo URL</li>
</ul>


<p>Octopress will then detect if its a User/Org repo, or a project page repo, and create the branches accordingly. If it&rsquo;s a user/org repo it will create your master branch, if it is a project page it will create the gh-pages branch for you.</p>

<h3>Deploying to GitHub</h3>

<p>As if this wasn&rsquo;t easy enough already, this part was just a breeze. All it takes, is running two simple commands</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Octopress will push your blog to gitHub, and GitHub will build your pages. Since you&rsquo;re pushing static files to GitHub, you don&rsquo;t have to wait for it to compile the page like you would if it were pushing Jekyll source to gitHub.</p>

<h3>Adding your custom domain name</h3>

<p>GitHub makes this almost too easy. First go into your DNS settings and point your domain name to <code>204.232.175.78</code>. Then in the root of your site, add a file called CNAME. My cname file looks like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaronmiler.com</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s that easy. GitHub will set up some automatic redirects such as redirecting www.aaronmiler.com to aaronmiler.com, and it will also redirect traffic from aaronmiler.github.io to aaronmiler.com.</p>

<p>I was blown away by how easy this was. I&rsquo;ve often at work created very small rails apps for simple sites, or resorted to using Wordpress. After using Octopress, and Jekyll to push my content to GitHub. I think I have now found my new work flow for smaller sites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Now Built with Octopress]]></title>
    <link href="http://aaronmiler.com/blog/now-built-with-octopress/"/>
    <updated>2013-06-25T22:31:00-07:00</updated>
    <id>http://aaronmiler.com/blog/now-built-with-octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve deployed my new blog using Otopress. I had been using Jekyll for the past couple of weeks, but I found very quickly that making changes, then rebuildling/testing was very time consuming, and rather annoying. One nice thing about Octopress is that I can simply run the server like I would a rails application and it will pay attention to changes and rebuild the site as needed.</p>

<!--more-->


<p>In the process of moving to Octopress I did have to fix some things on my local development environment. I kept getting an error from RVM that the GCC compiler wasn&rsquo;t working, and it was unable to create executables. After looking around stack overflow it seemed like a simple xCode issue. So I tinkered with that for a while.</p>

<p>After about a half hour of tinkering, I realized I wasn&rsquo;t really going anywhere with this. I&rsquo;m a huge advocate for Railsinstaller. If I need to get a machine up and running with rails quickly, that is always the route I take. However it seemed that some of the defaults that Railsinstaller used when I put it on my system kind of backed my RVM into a corner, and I was unable to update. Now Railsinstaller comes with a uninstallation option, so I simply uninstalled it, and reinstalled RVM with the normal install command.</p>

<p>In almost no time RVM installed with no gotchas, and Rails 4.0 was installed successfully. It was a rather quick and painless fix, and hopefully now I&rsquo;ll have a little bit more freedom with my RVM installation.</p>
]]></content>
  </entry>
  
</feed>
